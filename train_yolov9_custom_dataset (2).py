# -*- coding: utf-8 -*-
"""Train_YOLOv9_Custom_Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12vOqQ9nR9vcsOmSODfnrJQQrDLizvRTG

#**Step 01: Clone the YOLOv9 Github Repo**
"""

!git clone https://github.com/WongKinYiu/yolov9.git

"""#**Step 02: Change Current Directory**"""

# Commented out IPython magic to ensure Python compatibility.
# %cd yolov9

"""#**Step 03: Install All the Required Packages**"""

!pip install -r requirements.txt -q

"""#**Step 04: Download the Model Weights**

**NOTE:** In the YOLOv9 paper, versions yolov9-s and yolov9-m are also mentioned, but the weights for these models are not yet available in the YOLOv9 repository.
"""

import os
HOME = os.getcwd()
print(HOME)

!mkdir -p {HOME}/weights

!wget -P {HOME}/weights -q https://github.com/WongKinYiu/yolov9/releases/download/v0.1/yolov9-c.pt
!wget -P {HOME}/weights -q https://github.com/WongKinYiu/yolov9/releases/download/v0.1/yolov9-e.pt

!ls -la {HOME}/weights

"""#**Step 05: Download the Dataset from Roboflow**"""

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="8joVH7TL2k5V6uScFBEy")
project = rf.workspace("project-uyrxf").project("ppe_detection-v1x3l")
version = project.version(2)
dataset = version.download("yolov9")

"""#**Step 06: Train Custom Model**"""

# Commented out IPython magic to ensure Python compatibility.
# %cd yolov9

!python train_dual.py --workers 8 --device 0 --batch 8 --data 'PPE_Detection-2/data.yaml' --img 640 --cfg models/detect/yolov9-e.yaml --weights '{HOME}/weights/yolov9-e.pt' --name yolov9-e-finetuning --hyp hyp.scratch-high.yaml --min-items 0 --epochs 30 --close-mosaic 15

"""#**Download Weights From the Drive**"""

!gdown "https://drive.google.com/uc?id=140oaWpcxsbZM9glqzeUYHR5gQT_wERX6&confirm=t"

"""##**Step 07: Examine Training Results**

**NOTE:** By default, the results of each subsequent training sessions are saved in `{HOME}/yolov9/runs/train/`, in directories named `exp`, `exp2`, `exp3`, ... You can override this behavior by using the `--name` parameter.
"""

!ls {HOME}/runs/train/yolov9-e-finetuning4/

from IPython.display import Image

Image(filename=f"{HOME}/runs/train/yolov9-e-finetuning4/results.png", width=1000)

Image(filename=f"{HOME}/runs/train/yolov9-e-finetuning4/confusion_matrix.png", width=1000)

Image(filename=f"{HOME}/runs/train/yolov9-e-finetuning4/val_batch0_pred.jpg", width=1000)

"""#**Step 08: Validate Custom Model**"""

# evaluate yolov9 models
!python val_dual.py --data 'PPE_Detection-2/data.yaml' --img 640 --batch 16 --conf 0.001 --iou 0.7 --device 0 --weights 'runs/train/yolov9-e-finetuning4/weights/best.pt' --save-json --name yolov9_ppe_c_640_val

"""#**Step 09: Download the Demo Videos**"""

!gdown "https://drive.google.com/uc?id=1Nyl18zr7zOJHh8uHtSic3dsJSY4LI_t-&confirm=t"

!gdown "https://drive.google.com/uc?id=1SxcrDanPAr-PZfJjWBxoa2t8lUSM2dZn&confirm=t"

"""#**Step 10: Inference on Image**"""

# inference yolov9 models
!python detect_dual.py --source 'PPE_Detection-2/valid/images/85_jpg.rf.bb831a912c797ce2a13ad85fe9e6094e.jpg' --img 640 --device 0 --weights 'best.pt' --name yolov9_c_ppe_640_detect

Image(filename=f"{HOME}/runs/detect/yolov9_c_ppe_640_detect/85_jpg.rf.bb831a912c797ce2a13ad85fe9e6094e.jpg")

"""#**Step 11: Inference on Video**"""

# inference yolov9 models
!python detect_dual.py --source 'PPE_Part1.mp4' --img 640 --device 0 --weights 'best.pt' --name yolov9_ppe_640_detect

"""#**Display the Output Video**"""

!rm '/content/result_compressed.mp4'

from IPython.display import HTML
from base64 import b64encode
import os

# Input video path
save_path = 'runs/detect/yolov9_ppe_640_detect/PPE_Part1.mp4'

# Compressed video path
compressed_path = "/content/result_compressed.mp4"

os.system(f"ffmpeg -i {save_path} -vcodec libx264 {compressed_path}")

# Show video
mp4 = open(compressed_path,'rb').read()
data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
HTML("""
<video width=400 controls>
      <source src="%s" type="video/mp4">
</video>
""" % data_url)

# inference yolov9 models
!python detect_dual.py --source 'PPE_Part2.mp4' --img 640 --device 0 --weights 'best.pt' --name yolov9_ppe_640_detect2

"""#**Display the Output Video**"""

!rm '/content/result_compressed.mp4'

from IPython.display import HTML
from base64 import b64encode
import os

# Input video path
save_path = 'runs/detect/yolov9_ppe_640_detect2/PPE_Part2.mp4'

# Compressed video path
compressed_path = "/content/result_compressed.mp4"

os.system(f"ffmpeg -i {save_path} -vcodec libx264 {compressed_path}")

# Show video
mp4 = open(compressed_path,'rb').read()
data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
HTML("""
<video width=400 controls>
      <source src="%s" type="video/mp4">
</video>
""" % data_url)

